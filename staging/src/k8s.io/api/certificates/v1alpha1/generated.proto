/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.certificates.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "k8s.io/api/certificates/v1alpha1";

// ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors
// (root certificates).
//
// ClusterTrustBundle objects are considered to be readable by any authenticated
// user in the cluster, because they can be mounted by pods using the
// `clusterTrustBundle` projection.  All service accounts have read access to
// ClusterTrustBundles by default.  Users who only have namespace-level access
// to a cluster can read ClusterTrustBundles by impersonating a serviceaccount
// that they have access to.
//
// It can be optionally associated with a particular assigner, in which case it
// contains one valid set of trust anchors for that signer. Signers may have
// multiple associated ClusterTrustBundles; each is an independent set of trust
// anchors for that signer. Admission control is used to enforce that only users
// with permissions on the signer can create or modify the corresponding bundle.
message ClusterTrustBundle {
  // metadata contains the object metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec contains the signer (if any) and trust anchors.
  optional ClusterTrustBundleSpec spec = 2;
}

// ClusterTrustBundleList is a collection of ClusterTrustBundle objects
message ClusterTrustBundleList {
  // metadata contains the list metadata.
  //
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is a collection of ClusterTrustBundle objects
  repeated ClusterTrustBundle items = 2;
}

// ClusterTrustBundleSpec contains the signer and trust anchors.
message ClusterTrustBundleSpec {
  // signerName indicates the associated signer, if any.
  //
  // In order to create or update a ClusterTrustBundle that sets signerName,
  // you must have the following cluster-scoped permission:
  // group=certificates.k8s.io resource=signers resourceName=<the signer name>
  // verb=attest.
  //
  // If signerName is not empty, then the ClusterTrustBundle object must be
  // named with the signer name as a prefix (translating slashes to colons).
  // For example, for the signer name `example.com/foo`, valid
  // ClusterTrustBundle object names include `example.com:foo:abc` and
  // `example.com:foo:v1`.
  //
  // If signerName is empty, then the ClusterTrustBundle object's name must
  // not have such a prefix.
  //
  // List/watch requests for ClusterTrustBundles can filter on this field
  // using a `spec.signerName=NAME` field selector.
  //
  // +optional
  optional string signerName = 1;

  // trustBundle contains the individual X.509 trust anchors for this
  // bundle, as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.
  //
  // The data must consist only of PEM certificate blocks that parse as valid
  // X.509 certificates.  Each certificate must include a basic constraints
  // extension with the CA bit set.  The API server will reject objects that
  // contain duplicate certificates, or that use PEM block headers.
  //
  // Users of ClusterTrustBundles, including Kubelet, are free to reorder and
  // deduplicate certificate blocks in this file according to their own logic,
  // as well as to drop PEM block headers and inter-block data.
  optional string trustBundle = 2;
}

message WorkloadCertificate {
  // metadata contains the object metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // spec contains the desired signer, and the requesting workload and node identity.
  optional WorkloadCertificateSpec spec = 2;

  // status contains the conditions and the issued certificate.
  // +optional
  optional WorkloadCertificateStatus status = 3;
}

// WorkloadCertificateCondition describes a condition of a CertificateSigningRequest object
message WorkloadCertificateCondition {
  optional string type = 1;

  // status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // reason indicates a brief reason for the request state
  // +optional
  optional string reason = 3;

  // message contains a human readable message with details about the request state
  // +optional
  optional string message = 4;

  // observedGeneration is the generation of the object at which this condition was recorded.
  optional int64 observedGeneration = 5;

  // lastUpdateTime is the time of the last update to this condition
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 6;

  // lastTransitionTime is the time the condition last transitioned from one status to another.
  // If unset, when a new condition type is added or an existing condition's status is changed,
  // the server defaults this to the current time.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 7;
}

message WorkloadCertificateList {
  // metadata contains the list metadata.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is a collection of WorkloadCertificate objects
  repeated WorkloadCertificate items = 2;
}

message WorkloadCertificateSpec {
  // signerName is the signer that should handle this request.
  //
  // Immutable after creation.
  optional string signerName = 1;

  // serviceAccount is the name of the service account of the pod being asserted.
  //
  // Immutable after creation.
  optional string serviceAccount = 2;

  // pod is the name of the pod being asserted.
  //
  // Immutable after creation.
  optional string pod = 4;

  // podUID is the UID of the pod being asserted.
  //
  // Immutable after creation.
  optional string podUID = 5;

  // node is the node on which the pod being asserted is running.
  //
  // Immutable after creation.
  optional string node = 6;

  // requester is the identity of the certificate requester (typically either the node identity, or the service account of a daemonset).
  //
  // Immutable after creation.
  optional string requester = 7;

  // PublicKey is the PEM-formatted public key.
  // +optional
  optional string publicKey = 8;
}

message WorkloadCertificateStatus {
  // conditions applied to the request. Known conditions are "Denied" and "Pending".
  // +listType=map
  // +listMapKey=type
  // +optional
  repeated WorkloadCertificateCondition conditions = 1;

  // +listType=atomic
  // +optional
  optional string certificate = 2;

  // +optional
  optional int64 certificateObservedGeneration = 3;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time notBefore = 4;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time notAfter = 5;

  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time beginRefreshAt = 6;
}

