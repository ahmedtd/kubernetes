/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// WorkloadCertificateSpecApplyConfiguration represents an declarative configuration of the WorkloadCertificateSpec type for use
// with apply.
type WorkloadCertificateSpecApplyConfiguration struct {
	SignerName     *string `json:"signerName,omitempty"`
	ServiceAccount *string `json:"serviceAccount,omitempty"`
	Pod            *string `json:"pod,omitempty"`
	PodUID         *string `json:"podUID,omitempty"`
	Node           *string `json:"node,omitempty"`
	Requester      *string `json:"requester,omitempty"`
	PublicKey      *string `json:"publicKey,omitempty"`
}

// WorkloadCertificateSpecApplyConfiguration constructs an declarative configuration of the WorkloadCertificateSpec type for use with
// apply.
func WorkloadCertificateSpec() *WorkloadCertificateSpecApplyConfiguration {
	return &WorkloadCertificateSpecApplyConfiguration{}
}

// WithSignerName sets the SignerName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SignerName field is set to the value of the last call.
func (b *WorkloadCertificateSpecApplyConfiguration) WithSignerName(value string) *WorkloadCertificateSpecApplyConfiguration {
	b.SignerName = &value
	return b
}

// WithServiceAccount sets the ServiceAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccount field is set to the value of the last call.
func (b *WorkloadCertificateSpecApplyConfiguration) WithServiceAccount(value string) *WorkloadCertificateSpecApplyConfiguration {
	b.ServiceAccount = &value
	return b
}

// WithPod sets the Pod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pod field is set to the value of the last call.
func (b *WorkloadCertificateSpecApplyConfiguration) WithPod(value string) *WorkloadCertificateSpecApplyConfiguration {
	b.Pod = &value
	return b
}

// WithPodUID sets the PodUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodUID field is set to the value of the last call.
func (b *WorkloadCertificateSpecApplyConfiguration) WithPodUID(value string) *WorkloadCertificateSpecApplyConfiguration {
	b.PodUID = &value
	return b
}

// WithNode sets the Node field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Node field is set to the value of the last call.
func (b *WorkloadCertificateSpecApplyConfiguration) WithNode(value string) *WorkloadCertificateSpecApplyConfiguration {
	b.Node = &value
	return b
}

// WithRequester sets the Requester field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Requester field is set to the value of the last call.
func (b *WorkloadCertificateSpecApplyConfiguration) WithRequester(value string) *WorkloadCertificateSpecApplyConfiguration {
	b.Requester = &value
	return b
}

// WithPublicKey sets the PublicKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PublicKey field is set to the value of the last call.
func (b *WorkloadCertificateSpecApplyConfiguration) WithPublicKey(value string) *WorkloadCertificateSpecApplyConfiguration {
	b.PublicKey = &value
	return b
}
