/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/certificates/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkloadCertificateLister helps list WorkloadCertificates.
// All objects returned here must be treated as read-only.
type WorkloadCertificateLister interface {
	// List lists all WorkloadCertificates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadCertificate, err error)
	// WorkloadCertificates returns an object that can list and get WorkloadCertificates.
	WorkloadCertificates(namespace string) WorkloadCertificateNamespaceLister
	WorkloadCertificateListerExpansion
}

// workloadCertificateLister implements the WorkloadCertificateLister interface.
type workloadCertificateLister struct {
	indexer cache.Indexer
}

// NewWorkloadCertificateLister returns a new WorkloadCertificateLister.
func NewWorkloadCertificateLister(indexer cache.Indexer) WorkloadCertificateLister {
	return &workloadCertificateLister{indexer: indexer}
}

// List lists all WorkloadCertificates in the indexer.
func (s *workloadCertificateLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadCertificate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadCertificate))
	})
	return ret, err
}

// WorkloadCertificates returns an object that can list and get WorkloadCertificates.
func (s *workloadCertificateLister) WorkloadCertificates(namespace string) WorkloadCertificateNamespaceLister {
	return workloadCertificateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkloadCertificateNamespaceLister helps list and get WorkloadCertificates.
// All objects returned here must be treated as read-only.
type WorkloadCertificateNamespaceLister interface {
	// List lists all WorkloadCertificates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkloadCertificate, err error)
	// Get retrieves the WorkloadCertificate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkloadCertificate, error)
	WorkloadCertificateNamespaceListerExpansion
}

// workloadCertificateNamespaceLister implements the WorkloadCertificateNamespaceLister
// interface.
type workloadCertificateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkloadCertificates in the indexer for a given namespace.
func (s workloadCertificateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkloadCertificate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkloadCertificate))
	})
	return ret, err
}

// Get retrieves the WorkloadCertificate from the indexer for a given namespace and name.
func (s workloadCertificateNamespaceLister) Get(name string) (*v1alpha1.WorkloadCertificate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workloadcertificate"), name)
	}
	return obj.(*v1alpha1.WorkloadCertificate), nil
}
